/**
\page releaseNotes Release Notes

\section release_0_9_6 OMPL 0.9.6 (XXX, 2012)
  - Minimum Boost version is now 1.44 (for full functionality)
  - Added state serialization, deserialization, state space signatures
  - Add the notion of DirectedControlSampler
  - Add OMPL Primer
  - Add state spaces for Dubins car and Reeds-Shepp curves
  - Add more planners for planning with controls (EST and Syclop)
  - Update EST, SBL and pSBL to use the PDF datastructure for representing probability density functions
  - Added support for setting generic parameters for various classes in OMPL
  - Fixed issues with static variables for console
  - Added RPY sampling to the RNG class
  - Make some public members protected for GoalState and GoalStates; improvements to GoalLazySamples
  - Add support for multiple solution paths in a Goal datastructure
  - Added StateSpace::getValueAddressAtLocation() to allow faster indexing in states using state space names
  - Added implementation of path hybridization
  - Added a more advanced path shortcutting method
  - The C++ code switched to the preferred boost::function syntax. A general method for exposing boost::function objects to Python was added, but this requires a patch to pygccxml.
  - To make installing and patching Py++, pygccml, and gccxml easier there is now a script called installPyPlusPlus.sh that does this. One can call this script after running cmake by typing “make installpypluplus”.

\section release_0_9_5 OMPL 0.9.5 (October 4, 2011)
- Added control sampler functions that allow specifying an intended direction of propagation
- Removed pre-generated Python binding code. It turns out that they are dependent on the particular Boost version.
- Bug fixes

\section release_0_9_4 OMPL 0.9.4 (August 16, 2011)
- Renamed StateManifold to StateSpace and ControlManifold to ControlSpace
- Added RRTstar contribution
- Added GNAT nearest neighbors datastructure
- Added representation of a discrete state space (DiscreteStateSpace)
- Added representation of probability density functions (PDF)
- Replaced the implementation of BasicPRM with PRM. Thanks to James Marble, the new implementation uses BGL.
- Moved state propagation functionality from ControlSpace to a separate StatePropagator class
- Added isStraightLinePathValid() to PlannerDefinition
- Using boost ublas for real vector projections
- Add sanity checks for state spaces
- Benchmarked planners are now run in a separate thread (and termination conditions are evaluated separately, to detect crashes)
- Added getType() for Goal and replaced getType() for planners by getSpecs()
- Generalized planner termination conditions. The user can now call terminate() at any time to signal a planner it should stop its computation
- Improvements to control::KPIECE1, so that it considers goal biasing more appropriately
- Move code for extracting machine properties from util/ to benchmark/
- Documentation fixes

\section release_0_9_3 OMPL 0.9.3 (May 2, 2011)
- Added path smoothing with splines
- Added a bi-directional implementation of KPIECE (BKPIECE)
- Support for computation of clearance and gradients that move away from invalid regions
- Separate "magic constants" to a separate, visible, location
- A number of bug fixes

\section release_0_9_2 OMPL 0.9.2 (February 21, 2011)
- Updates to operations on states: indexing in states can be done using state spaces or using integer values
- Bug fixes for planning with controls
- Minor doc improvements

\section release_0_9_1 OMPL 0.9.1 (December 17, 2010)
- Minor updates to build system

\section release_0_9_0 OMPL 0.9.0 (December 15, 2010; initial release)
- Implementations of many state-of-the-art sampling-based motion planning algorithms. For purely geometric planning, there are implementations of KPIECE, SBL, RRT, RRT Connect, EST, PRM, Lazy RRT, and others. For planning with differential constraints there are implementations of KPIECE and RRT. Addition of new planners poses very few constraints on the added code.
- A flexible mechanism for constructing arbitrarily complex configuration spaces and control spaces from simpler ones.
- A general method of defining goals: as states, as regions in configuration space, or implicitly.
- Various sampling strategies and an easy way to add other ones.
- Automatic selection of reasonable default parameters. Performance can be improved by tuning parameters, but solutions can be obtained without setting any parameters.
- Support for planning with the Open Dynamics Engine, a popular physics simulator.
- Tools for systematic, large-scale benchmarking.
.

*/
